LISP Functions

   (initget [bits] [string])
     __________________________________________________________________

   Establish keywords.
     __________________________________________________________________

   This function enables the restriction of user choices during their responses.

   The options for initget are defined using the bits argument. To specify multiple error-checking options, employ the sum-the-bits method: simply add the bits together to combine the options. For instance, a guideline is provided that prohibits negative values.

   The table below outlines the potential meanings for the bits argument:

   Bits Meaning
   1    Do not allow null input (user not allowed to press Enter).
   2    Do not allow zero values.
   16   reserved for future use
   32   Use dashed lines when drawing rubber band lines and boxes.

   For example, if you wish to restrict user input to only positive numbers (non-negative and non-zero) and draw a rubber-band line with variable.

   Once the bit code is established, you utilize a string to specify the values that the user is permitted to enter in response to the prompt generated by the subsequent function. This string comprises a list of keywords that will be accepted by the next command. Essentially, initget allows for the definition of keywords. If keywords are not to be utilized, the argument keys should be null or an empty string. The function consistently returns nil.

   When creating your list of keywords, separate each keyword with a space. Indicate allowable abbreviations by capitalizing the necessary letter(s). If the entire word is in capital letters, the user must input the complete word. Keywords may include letters, numbers, and dashes. An example of a keyword list is as follows:

   "One Two THree Four"

   In this case, the user can enter "three" or simply "th" for three.

   An alternative method of listing keywords is to write each word in
   all-capital letters, followed by a comma and the abbreviation for the
   word, as in the following example:

   "ONE,O TWO,T THREE,TH FOUR,F"

   This method is typically employed with (human) languages that do not utilize the letter upper- and lower-case letters.

   "~A B C _F _G ~_H"

   The tilde (~) prefix prevents the subsequent keyword from appearing in the popup menu. To display the tilde as a keyword, use double tildes (~~). Inputting a single tilde as a keyword will create a separator between menu items.

   The initial underscore prefix signifies that the subsequent keywords are globalized versions of the preceding ones. For instance, the first keyword ("A" in this case) corresponds to the first globalized keyword ("F"), the second keyword will align with the next globalized keyword ("B" matches "G"), and so forth. Users may input either the localized or globalized keyword; in both instances, the globalized keyword will be returned. Only the first globalized keyword needs to have the underscore prefix.

   This functionality can be applied to various LISP functions, although not all bits are applicable. The functions and their corresponding bits are as follows:

   Function        Bit
   [link](getstring) none
   [link](entsel)    none
   [link](nentsel)   none
   [link](nentselp)  none

EXAMPLES
   Code                         Returns
   (initget 1)                  nil
   (initget 6 "red blue green") nil

More about...
